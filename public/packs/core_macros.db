{"name":"Ruin Tokens","permission":{"default":0,"taXAFvhByAtu8MoU":3},"type":"script","flags":{"core":{"sourceId":"Macro.UIUpsTwS6c4oYRn9"},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.user.targets.forEach(t => {\n  // CONFIG BELOW:\n  // Number of images per size, going from S1 to S3.\n  let IMAGES_PER_SIZE = [2, 1, 1];\n  // Data path where your images are stored. Image files should be named like 'wreck-s2-1.png'. Last digit should be contiguous (don't have a 'wreck-s1-3.png' if there isn't a 'wreck-s1-2.png')\n  let IMAGE_PATH = \"wrecks/\";\n\n  // Script:\n  let size = t.actor.data.data.derived.mm.Size;\n  // Get random number between 1 and N, where n is number of images stored for mech size.\n  let rand = Math.ceil(Math.random() * IMAGES_PER_SIZE[size- 1]);\n  \n  let imgString = `${IMAGE_PATH}wreck-s${size}-${rand}.png`;\n  console.log(`Picked ${imgString} for ${t.name}`);\n\n  let data = {\n    img: imgString\n  };\n  t.document.update(data);\n  t.refresh();\n  game.combat.getCombatantByToken(t.id).delete();\n});","author":"taXAFvhByAtu8MoU","img":"systems/lancer/assets/icons/macro-icons/generic_item.svg","actorIds":[],"_id":"3qY1JO4MK6uK2znP"}
{"name":"Stabilize Token","permission":{"default":0,"PN55ItGPHjs7sY8L":3},"type":"script","flags":{"core":{"sourceId":"Macro.d699WQo7DT5zrIK7"}},"scope":"global","command":"(async ()=>{\n    \n    if (canvas.tokens.controlled.length !== 1) {\n        ui.notifications.error(\"Select one and only one token\");\n        return;\n    }\n\n    game.lancer.stabilizeMacro(canvas.tokens.controlled[0].actor.id);\n\n})();","author":"PN55ItGPHjs7sY8L","img":"systems/lancer/assets/icons/macro-icons/marker.svg","actorIds":[],"_id":"JJibZu1uKQAGTdp2"}
{"_id":"Q07qegz0pYbqIk61","name":"Structure Token","type":"script","author":"eC9B4k0LaO1597E7","img":"systems/lancer/assets/icons/macro-icons/condition_shredded.svg","scope":"global","command":"if (canvas.tokens.controlled.length !== 1) {\n    ui.notifications.error(\"Select one and only one token\");\n    return;\n}\ngame.lancer.prepareStructureMacro(token.actor);","folder":null,"sort":0,"permission":{"default":0,"eC9B4k0LaO1597E7":3},"flags":{"core":{"sourceId":"Macro.QwWNUKDeT8QcV1Hs"}}}
{"name":"Full Repair","permission":{"default":0,"PN55ItGPHjs7sY8L":3},"type":"script","flags":{"core":{"sourceId":"Macro.SaR8ruxHJ8xpF1Wj"}},"scope":"global","command":"(async ()=>{\n    \n    if (canvas.tokens.controlled.length !== 1) {\n        ui.notifications.error(\"Select one and only one token\");\n        return;\n    }\n\n    game.lancer.fullRepairMacro(canvas.tokens.controlled[0].actor.id);\n\n})();","author":"PN55ItGPHjs7sY8L","img":"systems/lancer/assets/icons/macro-icons/repair.svg","actorIds":[],"_id":"RUi3krm3oDSFiIvh"}
{"_id":"kk1B4eEs5kxMhcMy","name":"Overheat Token","type":"script","author":"eC9B4k0LaO1597E7","img":"systems/lancer/assets/icons/macro-icons/damage_heat.svg","scope":"global","command":"if (canvas.tokens.controlled.length !== 1) {\n  ui.notifications.error(\"Select one and only one token\");\n  return;\n}\ngame.lancer.prepareOverheatMacro(token.actor);","folder":null,"sort":0,"permission":{"default":0,"eC9B4k0LaO1597E7":3},"flags":{"core":{"sourceId":"Macro.bzlNd5XL876ZeG16"}}}
{"_id":"3KPsYon0LoANWX54","name":"Scan","type":"script","author":"2a2IgZ2kiAqXSGqu","img":"systems/lancer/assets/icons/macro-icons/tech_quick.svg","scope":"global","command":"let targets = Array.from(game.user.targets);\n\ntargets.forEach(target => {\n    let sc_dir = target.document.actor._prev_derived.mm\n    let hase_table_html = `\n    <table>\n    <tr>\n    <th>HULL</th><th>AGI</th><th>SYS</th><th>ENG</th>\n    </tr>\n    <tr>\n    <td>${sc_dir.Hull}</td><td>${sc_dir.Agi}</td><td>${sc_dir.Sys}</td><td>${sc_dir.Eng}</td>\n    </tr>\n    </table>\n    `\n    let stat_table_html = `\n    <table>\n    <tr>\n    <th>Armor</th><th>HP</th><th>Heat</th><th>Speed</th>\n    </tr>\n    <tr>\n    <td>${sc_dir.Armor}</td><td>${sc_dir.CurrentHP}/${sc_dir.MaxHP}</td><td>${sc_dir.CurrentHeat}/${sc_dir.HeatCapacity}</td><td>${sc_dir.Speed}</td>\n    </tr>\n    <tr>\n    <th>Evasion</th><th>E-Defense</th><th>Save</th><th>Sensors</th>\n    </tr>\n    <tr>\n    <td>${sc_dir.Evasion}</td><td>${sc_dir.EDefense}</td><td>${sc_dir.SaveTarget}</td><td>${sc_dir.SensorRange}</td>\n    </tr>\n    <td>\n    </table>\n    `\n    let sc_list = ``\n    if (!sc_dir._features || sc_dir._features.length == 0) {\n        sc_list += \"<p>NONE</p>\";\n    } else {\n        sc_dir._features.forEach(i => {\n            let sc_desc = ``\n            if (i.Effect) {\n                sc_desc = i.Effect\n            } else {\n                sc_desc = \"No description given.\"\n            }\n            if (i.Trigger) {\n                sc_desc = \"Trigger: \" + i.Trigger + \"<br>\" + sc_desc\n            }\n            let sc_entry = \"<details><summary>\" + i.Name + \"</summary><p>\" + sc_desc + \"</p></details>\"\n            sc_list += sc_entry\n        });\n    }\n\n\n    let sc_templates = ``\n    if (!sc_dir._templates || sc_dir._templates.length == 0) {\n        sc_templates += \"<p>NONE</p>\";\n    } else {\n        sc_dir._templates.forEach(i => {\n            let sc_entry = \"<p>\" + i.Name + \"</p>\"\n            sc_templates += sc_entry\n        });\n    }\n\n    sc_templates += \"<br>\"\n\n    ChatMessage.create({\n        user: game.user._id,\n        content: `<h2>Scan results: ${sc_dir.Name}</h2>` + hase_table_html + stat_table_html + `<h3>Templates:</h3>` + sc_templates + `<h3>Systems:</h3>` + sc_list\n    });\n})","folder":null,"sort":0,"permission":{"default":0,"2a2IgZ2kiAqXSGqu":3},"flags":{}}
{"_id":"angOaW77n9ZZZqgq","name":"Custom Paint Job","type":"script","author":"2a2IgZ2kiAqXSGqu","img":"systems/lancer/assets/icons/macro-icons/system.svg","scope":"global","command":"// This macro is designed to be used with Triggler from Combat Utility Belt. Otherwise, it can be used as an alternative to manually using the Structure macro. It also includes \"destroying\" the Custom Paint Job system in order to check if it's been used between full repairs.\n\nlet actor = game.actors.get(canvas.tokens.controlled[0].actor.id)\n//console.log(actor);\n\nasync function scratchedThePaint() {\n    /* actor.data.data.derived.hp.value = 1;\n    actor.data.data.hp = 1\n    actor.data.data.derived.mm.CurrentHP = 1 */\n    await actor.update({data: {hp: 1}});\n    //console.log(actor)\n    await actor.updateEmbeddedDocuments(\"Item\",[{_id:CPJId, 'data.destroyed':true}])\n    return \"Done.\";\n};\n\nif (canvas.tokens.controlled.length !== 1) {\n    ui.notifications.error(\"Select one and only one token\");\n    return;\n}\n\nlet itemMap = await actor.data.items.contents;\n\n//console.log(itemMap)\nlet CPJFound = false;\nlet CPJId = \"\";\nlet CPJIndex = 0;\nfor (let i = 0; i < itemMap.length; i++) {\n    let moduleName = await itemMap[i].data.name;\n    if (moduleName == \"CUSTOM PAINT JOB\") {\n        //console.log(await actor.data.items)\n        if (itemMap[i].data.data.destroyed == true) {\n            console.log(\"Custom Paintjob has already been used.\");\n        } else {\n            console.log(\"Custom Paintjob found.\");\n            CPJId = await itemMap[i].data._id;\n            CPJFound = true;\n            CPJIndex = i;\n            break;\n        };\n    };\n};\n\n//console.log(await canvas.tokens.controlled[0].actor.data.data.derived.hp.value)\nif (CPJFound == true) {\n    let roll = new Roll('1d6').roll();\n    console.log(await roll._total);\n    if (await roll._total == 6) {\n        await scratchedThePaint()\n        canvas.tokens.controlled[0].drawBars();\n    } else {\n        game.lancer.prepareStructureMacro(canvas.tokens.controlled[0].actor.id);\n    }\n} else {\n    game.lancer.prepareStructureMacro(canvas.tokens.controlled[0].actor.id);\n    canvas.tokens.controlled[0].drawBars();\n};","folder":null,"sort":0,"permission":{"default":0,"2a2IgZ2kiAqXSGqu":3},"flags":{}}
{"_id":"Yx1pdJKNYFKkIYAZ","name":"Mimic Gun","type":"script","author":"2a2IgZ2kiAqXSGqu","img":"systems/lancer/assets/icons/macro-icons/d20-framed.svg","scope":"global","command":"// Calculate a Range for the Mimic Gun.\nasync function getRange() {\n  const roll = await new Roll(\"d20\").roll({ async: true });\n  const text =\n  `<i class=\"cci cci-range i--m i--dark\"></i> ${roll.total}` +\n  `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;` +\n  `${Math.ceil(roll.total / 2) + 1} ` +\n  `<i class=\"cci cci-kinetic i--m damage--kinetic\"></i>`;\n  return text;\n}\n\n// Construct HTML message table for chat message.\nasync function buildMessageTable() {\n  const messageTable =  \n    \"<b><h2>Mimic Gun Ranges</h2></b>\" + \n    \"<p><b>Range 1: </b>\" + await getRange() +\n    \"<hr><p><b>Range 2: </b>\" + await getRange() +\n    \"<hr><p><b>Range 3: </b>\" + await getRange()\n  return messageTable;\n}\n\n// Construct the chat message.\nasync function buildChatData() {\n  return {\n    user: game.user.id,\n    speaker: ChatMessage.getSpeaker(),\n    content: await buildMessageTable()\n  };\n}\n\nChatMessage.create(await buildChatData(), {});","folder":null,"sort":0,"permission":{"default":0,"2a2IgZ2kiAqXSGqu":3},"flags":{}}
